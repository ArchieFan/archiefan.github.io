<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<meta content="width=device-width, initial-scale=1.0" name="viewport">

	<title>My Portfolio</title>
	<meta content="" name="description">
	<meta content="" name="keywords">

	<!-- Favicons -->
	<link href="assets/img/favicon.png" rel="icon">

	<!-- Google Fonts -->
	<link href="https://fonts.gstatic.com" rel="preconnect">
	<link
		href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Nunito:300,300i,400,400i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i"
		rel="stylesheet">

	<!-- Vendor CSS Files -->
	<link href="assets/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
	<link href="assets/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">

	<!-- Template Main CSS File -->
	<link href="assets/css/style.css" rel="stylesheet">

	<script src="assets/js/layout.js"></script>
</head>

<body>

	<!-- ======= Header ======= -->
	<header id="header" class="header fixed-top d-flex align-items-center">

		<div class="d-flex align-items-center justify-content-between">
			<i class="bi bi-list toggle-sidebar-btn"></i>
		</div><!-- End Logo -->

		<nav class="header-nav ms-auto">

			<ul class="d-flex align-items-center">
				<div w3-include-html="header.htm"></div>
			</ul>
		</nav><!-- End Icons Navigation -->
	</header><!-- End Header -->

	<!-- ======= Sidebar ======= -->
	<div w3-include-html="sidebar.htm"></div>

	<main id="main" class="main">


		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="386" height="256" src="OOP basic.files/OOP basic0.png"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">The four core concepts in object-oriented programming are </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);"><span>1)<span>&nbsp;</span></span></span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">encapsulation</span><span style="font-family:Arial;font-size:12.0000pt;
">, </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);"><span>2)<span>&nbsp;</span></span></span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">abstraction</span><span style="font-family:Arial;font-size:12.0000pt;
">,</span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);"><span>3)<span>&nbsp;</span></span></span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">inheritance</span><span style="font-family:Arial;font-size:12.0000pt;
">, and </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);"><span>4)<span>&nbsp;</span></span></span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">polymorphism </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Calibri;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="352" height="252" src="OOP basic.files/OOP basic124.png"><span style="font-family:Calibri;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Calibri;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">Before object-oriented programming, we had procedure of programming that divided a program into a set of functions.
				So we have data stored in a bunch of variables and functions that operate on the data. This style of
				programming is very simple and straightforward. Often, it's what you learn as part of your first
				programming subject at a university. But as your programs grow, it will end up with a bunch of functions
				that are all over the place. You might find yourself copying and pasting lines of code over and over.
				You make a change to one function and then several other functions break. That's what we call spaghetti
				code. </span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">There is so much interdependence between all these functions. It becomes problematic.
				Object-oriented programming came to solve this problem.</span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">In object-oriented programming, </span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">we combine a group of related variables and functions into a unit</span><span style="font-family:Arial;font-size:12.0000pt;
">. We call that unit an </span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">object</span><span style="font-family:Arial;font-size:12.0000pt;
">. We refer to these variables as </span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">properties </span><span style="font-family:Arial;font-size:12.0000pt;
">and the functions as </span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">methods</span><span style="font-family:Arial;font-size:12.0000pt;
">. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="198" height="235" src="OOP basic.files/OOP basic1102.png"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">Here's an example. Think of a car a car is an object with properties, such as make, model, and color. And methods
				like start, stop, and move. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="284" height="203" src="OOP basic.files/OOP basic1248.png"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">Think of the local storage object in your browser. Every browser has a local storage object that allows you to store
				data locally. This local storage object has a property like length which returns the number of objects
				in the storage and methods like set item and remove item. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<h1><b><span style="font-family:Calibri;
font-weight:bold;font-size:22.0000pt;
">Encapsulation</span></b><b><span style="font-family:Calibri;
font-weight:bold;font-size:22.0000pt;
">
					<o:p></o:p>
				</span></b></h1>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="446" height="280" src="OOP basic.files/OOP basic1546.png"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">In object-oriented programming, we </span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">group related variables and functions that operate on them into objects</span><span style="font-family:Arial;font-size:12.0000pt;
">. And this is what we call </span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">encapsulation</span><span style="font-family:Arial;font-size:12.0000pt;
">.</span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="413" height="132" src="OOP basic.files/OOP basic1698.png"><span style="font-family:Calibri;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Calibri;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">Let me show you an example of this in action. Here we have three variables, base salary, over time, and rate. Below
				these we have a function to calculate the wage for an employee. We refer to this kind of implementation
				as procedural. So we have variables on one side and functions on the other side. They're hard decoupled.
			</span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="355" height="114" src="OOP basic.files/OOP basic2028.png"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">Now, let's take a look at the object-oriented way to solve this problem. We can have an employee object with three
				properties a salary, over time, and rate, and a method called get wage. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">Now, why is this better? Well. first of all, look at the get wage function. This function has no parameters. In
				contrast, in a procedural example, our get wage function has three parameters. In this implementation,
				the reason we don't have any parameters is because all these parameters are actually modeled as
				properties of this object. All these properties and the get wage function they are highly related. So
			</span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">they are part of one unit</span><span style="font-family:Arial;font-size:12.0000pt;
">. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="408" height="177" src="OOP basic.files/OOP basic2662.png"><span style="font-family:Calibri;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Calibri;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">So one of the symptoms of procedural code is functions with so many parameters. When you write code in an
				object-oriented way, your functions end up having fewer and fewer parameters. As Uncle Bob says the best
				functions are those with no parameters.</span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">&nbsp;The fewer the number of parameters, the easier it is to use and maintain that
				function.</span><span style="font-family:Arial;font-size:12.0000pt;
">&nbsp;So, that's encapsulation.</span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<h1><b><span style="font-family:Calibri;
font-weight:bold;font-size:22.0000pt;
">Abstraction </span></b><b><span style="font-family:Calibri;
font-weight:bold;font-size:22.0000pt;
">
					<o:p></o:p>
				</span></b></h1>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Calibri;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="552" height="234" src="OOP basic.files/OOP basic3046.png"><span style="font-family:Calibri;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">Abstraction </span><span style="font-family:Arial;font-size:12.0000pt;
">is like a </span><span style="font-family:Arial;
font-size:12.0000pt;background:rgb(255,255,0);">Black box. We don’t care how they work just that they give us the right
				things.</span><span style="font-family:Arial;
font-size:12.0000pt;">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Calibri;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">Now, let's look at abstraction. Think of a DVD player as an object. This DVD player has a complex logic board on the
				inside and a few buttons on the outside that you interact with. You simply press the play button and you
				don't care what happens on the inside. All that complexity is hidden from you. This is abstraction in
				practice. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">We can use the same technique in our objects. So, we can hide some of the properties and methods from the outside.
				And, this gives us a couple of benefits. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="504" height="301" src="OOP basic.files/OOP basic3645.png"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">First is that, we'll </span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">make the interface of those objects simpler</span><span style="font-family:Arial;font-size:12.0000pt;
">. Using an understanding an object with a few properties and methods is easier than an object with several properties
				and methods. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">The second benefit is that it helps us </span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">reduce the impact of change</span><span style="font-family:Arial;font-size:12.0000pt;
">. Let's imagine that tomorrow we change these inner or private methods. These changes will leak to the outside
				because we don't have any code that touches these methods outside of their containing object. We may
				delete a method or change its parameters, but none of these changes will impact the rest of the
				applications code. So with abstraction, we reduce the impact of change now.</span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<h1><b><span style="font-family:Calibri;
font-weight:bold;font-size:22.0000pt;
">Inheritance </span></b><b><span style="font-family:Arial;font-weight:bold;
font-size:12.0000pt;">
					<o:p></o:p>
				</span></b></h1>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">The third core concept in object-oriented programming inheritance. Inheritance is a mechanism that allows you to
			</span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">eliminate redundant code</span><span style="font-family:Arial;font-size:12.0000pt;
">. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="553" height="331" src="OOP basic.files/OOP basic4451.png"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">Here's an example. Think of HTML elements like text boxes, drop-down lists, checkboxes, and so on. All these elements
				have a few things in common. They should have properties like hidden and inner HTML, and methods like
				click and focus. Instead of redefining all these properties and methods, for every type of HTML element,
				we can define them once in a generic object called HTML element. And have other objects inherit these
				properties and methods. So inheritance helps us eliminate redundant code. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<h1><b><span style="font-family:Calibri;
font-weight:bold;font-size:22.0000pt;
">Polymorphism </span></b><b><span style="font-family:Arial;font-weight:bold;
font-size:12.0000pt;">
					<o:p></o:p>
				</span></b></h1>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">Finally, polymorphism means many forms. In object-oriented programming, polymorphism is a technique that allows you
				to get rid of long ethanol, or switch and case statements. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="553" height="171" src="OOP basic.files/OOP basic5149.png"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">So back to our HTML elements example, all these objects should have the ability to be rendered on a page. But the way
				each element is rendered is different from the others. If you want to render multiple HTML elements in a
				procedural way, our code would probably look like this. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="471" height="249" src="OOP basic.files/OOP basic5434.png"><span style="font-family:Calibri;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Calibri;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">But with object orientation, we can implement a render method in each of these objects, and the render method will
				behave differently depending on the type of the object. You're referencing so we can get rid of this
				nasty switch and case and use one line of code like this. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><img width="553" height="285" src="OOP basic.files/OOP basic5714.png"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">Here are the benefits of object oriented programming. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">Using </span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">encapsulation</span><span style="font-family:Arial;font-size:12.0000pt;
">, we group related variables and functions together. And this way, we can reduce complexity. Now, we can reuse this
				object and do from parts of a program or in different programs. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">With </span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">abstraction</span><span style="font-family:Arial;font-size:12.0000pt;
">, we hide the details and the complexity, and show only the essentials. This technique reduces complexity and also
				isolates the impact of changes in the code. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">With </span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">inheritance</span><span style="font-family:Arial;font-size:12.0000pt;
">, we can eliminate redundant code. </span><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p></o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">
				<o:p>&nbsp;</o:p>
			</span></p>
		<p class=MsoNormal style="margin-top:0.0000pt;margin-right:0.0000pt;margin-bottom:0.0000pt;
margin-left:0.0000pt;padding:0pt 0pt 0pt 0pt ;
text-align:left;"><span style="font-family:Arial;font-size:12.0000pt;
">With </span><span style="font-family:Arial;font-size:12.0000pt;
background:rgb(255,255,0);">polymorphism</span><span style="font-family:Arial;font-size:12.0000pt;
">, we can refactor ugly switch case statements. </span><span style="font-family:Calibri;
">
				<o:p></o:p>
			</span></p>

	</main><!-- End #main -->

	<!-- ======= Footer ======= -->
	<div w3-include-html="footer.htm"></div>
	<script>includeHTML();</script>

	<a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i
			class="bi bi-arrow-up-short"></i></a>

	<!-- Vendor JS Files -->
	<script src="assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

	<!-- Template Main JS File -->
	<script src="assets/js/main.js"></script>

</body>

</html>