<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">

    <title>My Portfolio</title>
    <meta content="" name="description">
    <meta content="" name="keywords">

    <!-- Favicons -->
    <link href="assets/img/favicon.png" rel="icon">

    <!-- Google Fonts -->
    <link href="https://fonts.gstatic.com" rel="preconnect">
    <link
        href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Nunito:300,300i,400,400i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i"
        rel="stylesheet">

    <!-- Vendor CSS Files -->
    <link href="assets/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="assets/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">

    <!-- Template Main CSS File -->
    <link href="assets/css/style.css" rel="stylesheet">

    <script src="assets/js/layout.js"></script>
</head>

<body>

    <!-- ======= Header ======= -->
    <header id="header" class="header fixed-top d-flex align-items-center">

        <div class="d-flex align-items-center justify-content-between">
            <i class="bi bi-list toggle-sidebar-btn"></i>
        </div><!-- End Logo -->

        <nav class="header-nav ms-auto">

            <ul class="d-flex align-items-center">
                <div w3-include-html="header.htm"></div>
            </ul>
        </nav><!-- End Icons Navigation -->
    </header><!-- End Header -->
    

    <!-- ======= Sidebar ======= -->
    <div w3-include-html="sidebar.htm"></div>

    <main id="main" class="main">



        <section class="section dashboard">
            <p align=center> <span style="font-family:SimSun;">Catalog </p>
            <p><a href="#_Toc5188 ">What is DevOps?</a>
            <p><a href="#_Toc4234 ">Ingredients</a>
            <p><a href="#_Toc23130 ">Why is continuous integration?</a></p>
            <p><a href="#_Toc6001 ">Step-by-step to create CI CD automation in GitHub using GitHub
                    Actions</a></p>
            <p><a href="#_Toc19783 ">What is continuous deployment?</a></p>
            <p><a href="#_Toc28264 ">Step-by-step to create CI CD automation in GitHub using Azure
                    DevOps</a></p>
            <p> <br> </p>
            <p> <br> </p>
            <p> <br> </p>
            <p> <br> </p>
            <h1> <a name="_Toc5188"></a><b>What is DevOps?</b></h1>
            <p><br></p>
            <p>
                Devops integrates
                developers and operations teams in order to improve collaboration and
                productivity, by automating infrastructure, automating workflows and
                continuously measuring application performance.</p>
            <p> <br> </p>
            <p><img width="286" height="193" src="DevOps 101.files/DevOps 101809.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                They would place more
                focus on automation. DevOps teams try to automate everything: from
                testing of new code to how infrastructure is provisioned.<span style="font-family:Arial;"></p>
            <p> <br> </p>
            <p><img width="560" height="222" src="DevOps 101.files/DevOps 101960.png"> <br>
            </p>
            <p> <br> </p>
            <p> <br> </p>
            <p> <br> </p>
            <h1><a name="_Toc4234"></a><b>Ingredients</b>
            </h1>
            <p>VS Code Text Editor</p>
            <p>.Net Core SDK</p>
            <p>Postman</p>
            <p>GitHub, Azure & Azure DevOps</p>
            <p> <br> </p>
            <p>What is Continuous Integration and Continuous Delivery/Deployment?</p>
            <p> <br> </p>
            <p><img width="439" height="75" src="DevOps 101.files/DevOps 1011117.png"> <br>
            </p>
            <p> <br> </p>
            <p>They are the kind of steps. Continuous Integration is the the art or
                the practice of multiple developers committing code to a branch, and having
                that chord built and tested to ensure that the build and the chord branch
                remains healthy. So you've got multiple contributors making sure they don't
                break the the codebase. Basically, that's what continuous integration is and
                it involves building and testing the codebase.</p>
            <p>
                <br>
            </p>
            <p>Continuous Delivery is the next bit in the pipeline and it really is talking
                about that successful build and packaging
                it. Ready to be deployed into production.</p>
            <p> <br> </p>
            <p>Continuous Deployment is taking it that one step further. There is no manual
                intervention from the point. Where you commit code to your repository, the
                pipeline will run and will deploy all the way through to production.</p>
            <p> <br> </p>
            <p>Note: There's not that many organizations or they're certainly fewer
                organizations that practice that. Mainly because business and IT remain
                relatively separate beasts. And IT are responsible for the build and the
                packaging and it's not ultimately their decision to release software into
                production. That's a business decision. So very few put very few
                organizations are at that level of maturity with a confident enough to
                deploy all the way through the production. So most organizations take it to
                the point of continuous delivery. And then, there's some manual process
                where the greenlight is given to deploy into production. </p>
            <p>
                <br>
            </p>
            <p> <br> </p>
            <p><img width="554" height="268" src="DevOps 101.files/DevOps 1012557.png"> <br>
            </p>
            <p> <br> </p>
            <p> <br> </p>
            <p> <br> </p>
            <h1><a name="_Toc23130"></a><b>Why is continuous integration?</b>
            </h1>
            <p> <br> </p>
            <p><img width="349" height="163" src="DevOps 101.files/DevOps 1012594.png"> <br>
            </p>
            <p> <br> </p>
            <p>In short, CI is building and testing. Because the old saying
                goes friends don't let friends
                publish from the visual studio, that means
                if you are here in
                visual studio, yes, I showed you that you can press right-click, use
                publish, and use the interactive UI to publish your code. That means
                you compile locally, you test locally, you publish locally directly
                into production. And that is something that is met with friends
                don't let friends use visual studio to publish
                applications. That are something that you shouldn't do.</p>
            <p> <br> </p>
            <p>In the real world, if you're just learning and just experimenting, there is
                nothing bad in trying publishing that to Azure. But in the real world, you
                should not do that. why? because multiple
                people work together, maybe they have different computers, maybe one has
                a mac, one has a windows machine, one has a Linux machine, they are
                they're configured differently, and sometimes things
                don't work as expected. </p>
            <p> <br> </p>
            <p>There should be a single source of truth
                for the source code. That is the source code that lives in GitHub. And
                there should be a single environment which is defined, which is
                standardized, which is always available, and this environment should do
                the compiling, the testing, and the publishing. </p>
            <p> <br> </p>
            <p>If your computer works fine, everything is good. If your computer is screwed
                up, and I don't know if you have a lot of malware installed, and the malware
                manipulated your c-sharp compiler and compiles malware into your
                application. That would be a huge security problem if you would deploy
                publish directly from your computer. Therefore, we don't do that. </p>
            <p> <br> </p>
            <p>The thing we do is we just commit and push code to GitHub. And GitHub
                will provide the necessary build servers which are free of malware, which is
                standardized, which is always available. And from there, we publish to our
                cloud environment. This is the reason why we use continuous deployment.</p>
            <p> <br> </p>
            <p>It's reliable. it's repeatable, and it's secure. Deploying from your local
                computer is insecure, and sometimes unreliable, and sometimes not always
                repeatable because things tend to break. Maybe it works on one machine, but
                your colleague has a different setting and it doesn't work on his machine.
                That's a problem. If you have to deploy, you must be able to deploy with
                GitHub continuous integration or any kind of continuous integration.
                You can always deploy because all you need to do is check in the
                code. </p>
            <p> <br> </p>
            <h1><a name="_Toc6001"></a><b>Step-by-step
                    to create CI CD automation in GitHub using GitHub
                    Actions</b>
            </h1>
            <p> <br> </p>
            <p>
                <![if !supportLists]>1)
                <![endif]>Create a new repository in GitHub
            </p>
            <p><img width="231" height="86" src="DevOps 101.files/DevOps 1015112.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>2)
                <![endif]>Input he name of new repository
            </p>
            <p> <br> </p>
            <p><img width="556" height="353" src="DevOps 101.files/DevOps 1015148.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>3)
                <![endif]>Copy the URL for the new repository
            </p>
            <p> <br> </p>
            <p><img width="554" height="63" src="DevOps 101.files/DevOps 1015188.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>4)
                <![endif]>Clone the repository to local
            </p>
            <p> <br> </p>
            <p><img width="556" height="132" src="DevOps 101.files/DevOps 1015222.png"> <br>
            </p>
            <p> <br> </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>5)
                <![endif]>Type in start
                . to
                open the windows explorer.
            </p>
            <p> <br> </p>
            <p><img width="555" height="292" src="DevOps 101.files/DevOps 1015273.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>6)
                <![endif]>Copy all the project files to repository folder
            </p>
            <p> <br> </p>
            <p><img width="553" height="262" src="DevOps 101.files/DevOps 1015325.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>7)
                <![endif]>Open the repository folder using the VS code and add
                the .gitignore file
            </p>
            <p><img width="554" height="318" src="DevOps 101.files/DevOps 1015401.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>8)
                <![endif]>Approach 1, get the gitignore file source code from
                gitignore.io by creating
                visualstudio keyword
            </p>
            <p> <br> </p>
            <p><img width="554" height="485" src="DevOps 101.files/DevOps 1015503.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>9)
                <![endif]>Copy all the content
            </p>
            <p><img width="554" height="485" src="DevOps 101.files/DevOps 1015527.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>10)
                <![endif]>paste it in the project
            </p>
            <p> <br> </p>
            <p><img width="554" height="318" src="DevOps 101.files/DevOps 1015555.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>11)
                <![endif]>Approach 2, use gitignore extension
            </p>
            <p> <br> </p>
            <p><img width="554" height="392" src="DevOps 101.files/DevOps 1015595.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>12)
                <![endif]>Press ‘F1’ to open the command palette and ‘<span style="font-family:Calibri;">add gitignore
                    <font face="Calibri">’</font>
            </p>
            <p> <br> </p>
            <p><img width="554" height="392" src="DevOps 101.files/DevOps 1015658.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>13)
                <![endif]>select visualstudio
            </p>
            <p> <br> </p>
            <p><img width="554" height="392" src="DevOps 101.files/DevOps 1015682.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>14)
                <![endif]>select either Append or Overwrite
            </p>
            <p> <br> </p>
            <p><img width="554" height="392" src="DevOps 101.files/DevOps 1015720.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>15)
                <![endif]>Added the source code
            </p>
            <p><img width="554" height="392" src="DevOps 101.files/DevOps 1015745.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>16)
                <![endif]>add the ‘.vs’ as well
            </p>
            <p> <br> </p>
            <p><img width="554" height="373" src="DevOps 101.files/DevOps 1015771.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>17)
                <![endif]>Now, you can start to commit the change to staging
                repository
            </p>
            <p> <br> </p>
            <p><img width="462" height="196" src="DevOps 101.files/DevOps 1015837.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>18)
                <![endif]>Add the name of the new commit
            </p>
            <p> <br> </p>
            <p><img width="410" height="169" src="DevOps 101.files/DevOps 1015872.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>19)
                <![endif]>PUSH all the changes to GitHub
            </p>
            <p> <br> </p>
            <p><img width="554" height="197" src="DevOps 101.files/DevOps 1015907.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>20)
                <![endif]>Check if all the source files are uploaded to GitHub
            </p>
            <p><img width="554" height="394" src="DevOps 101.files/DevOps 1015963.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>21)
                <![endif]>Now, we are ready to create the CICD pipeline.
                First, install the GitHub actions extension.
            </p>
            <p> <br> </p>
            <p><img width="554" height="332" src="DevOps 101.files/DevOps 1016060.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>22)
                <![endif]>Create the .github
                workflows folder and add yaml file
            </p>
            <p><img width="342" height="129" src="DevOps 101.files/DevOps 1016117.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>23)
                <![endif]>Start to add the CI CD actions to yaml files
            </p>
            <p>
                <![if !supportLists]>a)
                <![endif]>Checkout code from
                GitHub
            </p>
            <p>
                <![if !supportLists]>b)
                <![endif]>Setup .Net 6
                SDK
            </p>
            <p>
                <![if !supportLists]>c)
                <![endif]>Restore
                dependencies
            </p>
            <p>
                <![if !supportLists]>d)
                <![endif]>Build App
            </p>
            <p>
                <![if !supportLists]>e)
                <![endif]>Run Unit Test
            </p>
            <p> <br> </p>
            <p><img width="553" height="249" src="DevOps 101.files/DevOps 1016254.png"> <br> </p>
            <p> <br> </p>
            <p>Note: How to build dotnet in CLI.</p>
            <p> <br> </p>
            <p><img width="554" height="208" src="DevOps 101.files/DevOps 1016292.png"> <br> </p>
            <p> <br> </p>
            <p>Note: Careful for the branches you are
                using</p>
            <p><img width="556" height="354" src="DevOps 101.files/DevOps 1016340.png"> <br> </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>24)
                <![endif]>Check in the yaml file
            </p>
            <p> <br> </p>
            <p><img width="468" height="171" src="DevOps 101.files/DevOps 1016367.png"> <br> </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>25)
                <![endif]>Name the commit
            </p>
            <p><img width="386" height="175" src="DevOps 101.files/DevOps 1016387.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>26)
                <![endif]>PUSH the commit to GitHub
            </p>
            <p><img width="538" height="188" src="DevOps 101.files/DevOps 1016416.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>27)
                <![endif]>GitHub will build your app according to your yaml
                commands for continuous integration
            </p>
            <p> <br> </p>
            <p><img width="554" height="202" src="DevOps 101.files/DevOps 1016506.png"> <br>
            </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>28)
                <![endif]>Add the new xUnit test project
            </p>
            <p> <br> </p>
            <p><img width="553" height="194" src="DevOps 101.files/DevOps 1016541.png"> <br> </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>29)
                <![endif]>Add the run dotnot test in your yaml file
            </p>
            <p> <br> </p>
            <p><img width="505" height="154" src="DevOps 101.files/DevOps 1016587.png"> <br> </p>
            <p> <br> </p>
            <p>
                <![if !supportLists]>30)
                <![endif]>Commit and PUSH the changes to GitHub. The xUnit
                test are running as expected.
            </p>
            <p><img width="554" height="174" src="DevOps 101.files/DevOps 1016670.png"> <br>
            </p>
            <p> <br> </p>
            <p><img width="553" height="92" src="DevOps 101.files/DevOps 1016673.png"> <br>
            </p>
            <p> <br> </p>
            <p><img width="553" height="361" src="DevOps 101.files/DevOps 1016676.png"> <br>
            </p>
            <p> <br> </p>
            <p>Note: Don't underestimate automated tests. Test automation unit tests are
                super important if you write code. And, you don't write a test for the code.
                It shouldn't be okay. I know that we not always write tests but you
                should practice it. If you write some code, you write at least a passing
                test where you make sure that the acceptance criteria are met. And, you also
                write a negative test if you specify parameters that don't make sense make
                sure that your algorithm handles these situations gracefully. For instance,
                by throwing a proper exception like an argument null exception.</p>
            <p> <br> </p>
            <p>It's so important because the project you will add new features. You will
                change your code. You will optimize algorithms. And, how do you make sure
                that you don't break the features? If you don't have automated tests in
                place, the alternative would be that after every code change you have to do
                the testing manually.</p>
            <p> <br> </p>
            <p> <br> </p>
            <p> <br> </p>
            <p> <br> </p>
            <h1><a name="_Toc19783"></a><b>What
                    is continuous deployment?</b>
            </h1>
            <p>
                <br>
            </p>
            <p>
                continuous deployment
                means that we want to take the build results and put them into the
                target environment. </p>
            <p>
                <br>
            </p>
            <p>
                <![if !supportLists]><span>1)
                    <![endif]> Setup the
                    Credential to target ENV<span style="font-family:Arial;font-size:12.0000pt;">
            </p>
            <p>
                <![if !supportLists]><span>2)
                    <![endif]> Publish App
                    to Release
            </p>
            <p>
                <![if !supportLists]><span>3)
                    <![endif]> Deploy to
                    target ENV
            </p>
            <p>
                <br>
            </p>
            <p>
                <br>
            </p>
            <p>
                Note: you can configure
                the ENV variable like below (OPTIONAL)<span style="font-family:Arial;font-size:12.0000pt;"></p>
            <p>
                <img width="553" height="242" src="DevOps 101.files/DevOps 1017874.png"><span
                    style="font-family:Arial;font-size:12.0000pt;"> <br>
            </p>
            <p> <br> </p>
            <p> <br> </p>
            <h1><a name="_Toc28264"></a><b>Step-by-step
                    to create CI CD automation in GitHub using Azure DevOps</b>
            </h1>
            <p> <br> </p>
            <p> <br> </p>
            <p> <br> </p>
            <p> <br> </p>
            <p><img width="530" height="223" src="DevOps 101.files/DevOps 1017951.png"> <br>
            </p>
            <p> <br> </p>
            <p> <br> </p>
            <p>Kicking off and committing code to GitHub is basically going to be our
                trigger to start the pipeline. And, that's good as your DevOps takes over.
                And it's going to build our code base. It's going to run our unit tests.
                It's thing going to package it. Ready for release. And then, it's ultimately
                going to deploy it to Azure.</p>
            <p> <br> </p>
            <p><img width="518" height="219" src="DevOps 101.files/DevOps 1018281.png"> <br>
            </p>
            <p> <br> </p>
            <p>Azure DevOps also has a repository feature.</p>
            <p> <br> </p>
            <p><img width="530" height="224" src="DevOps 101.files/DevOps 1018329.png"> <br>
            </p>
            <p> <br> </p>
            <p> <br> </p>
            <p>Code Repository: GitHub, Azure DevOps, GitLab, Bitbucket </p>
            <p>Build Pipeline: GitHub Actions, Azure DevOps, Jenkins, circleCI</p>
        </section>

    </main><!-- End #main -->

    <!-- ======= Footer ======= -->
    <div w3-include-html="footer.htm"></div>
    <script>includeHTML();</script>

    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i
            class="bi bi-arrow-up-short"></i></a>

    <!-- Vendor JS Files -->
    <script src="assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <!-- Template Main JS File -->
    <script src="assets/js/main.js"></script>


</body>

</html>